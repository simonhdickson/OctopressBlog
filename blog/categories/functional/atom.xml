<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: functional | Simon's Blog]]></title>
  <link href="http://simonhdickson.github.io/blog/categories/functional/atom.xml" rel="self"/>
  <link href="http://simonhdickson.github.io/"/>
  <updated>2014-06-14T11:19:16+01:00</updated>
  <id>http://simonhdickson.github.io/</id>
  <author>
    <name><![CDATA[Simon Dickson]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[The Simon Says Monad]]></title>
    <link href="http://simonhdickson.github.io/blog/2013/11/22/the-simon-says-monad/"/>
    <updated>2013-11-22T15:56:00+00:00</updated>
    <id>http://simonhdickson.github.io/blog/2013/11/22/the-simon-says-monad</id>
    <content type="html"><![CDATA[<h3>What is a Monad?</h3>

<p>Everyone tries to explain monads in a simple way and makes it sound way more complicated than it really is. Something is monadic if there are rule or set of rules that can define how a set of functions is combined into another function. That not strictly mathmatically true, but anything that fits that description could at least be described as monadic.</p>

<p>You might be reading that and thinking &ldquo;surely everything is monadic?&rdquo;, well yes, almost everything is kind of monadic (or can be described in that way).</p>

<h3>The Simon Says Monad</h3>

<p>May I present the single most useful monad in the world!</p>

<p>``` fsharp Simon Says
let doIt this that =</p>

<pre><code>simonSays{
    let! i = this
    let! j = that
    printfn "%i" &lt;| i + j
}
</code></pre>

<p>```</p>

<p>So, the way I see it, when you declare simonSays { &hellip; }; you&rsquo;re basically saying &ldquo;we don&rsquo;t play by normal rules: now we play by simonSays rules.&rdquo; What this means is, if you don&rsquo;t say &ldquo;Simon Says&rdquo;, then you don&rsquo;t do anything. So for example, if we invoke it like this:</p>

<p><code>fsharp Simon Says 1 + 1
doIt (SimonSays 1) (SimonSays 1)
</code></p>

<p>Then the result is SimonSays 2. However if we do:</p>

<p><code>fsharp Simon Says 1 + SimonDidntSay
doIt (SimonSays 1) SimonDidntSay
</code></p>

<p>The the result is SimonDidntSay. To go back to the definition of monads earlier, &ldquo;Something is monadic if there are rule or set of rules that can define how a set of functions is combined into another function&rdquo;. In the Simon Says monad, there is a single very simple rule: you must say &ldquo;Simon Says&rdquo;, otherwise we don&rsquo;t do anything. If we re-write this code slightly to remove all the F# sugar, it become far more obvious what is happening here.</p>

<p>``` fsharp Simon Says using matches
let doIt this that =</p>

<pre><code>match this with
| SimonSays i -&gt;
    match that with
    | SimonSays j -&gt; printfn "%i" &lt;| i + j
    | _ -&gt; ()
| _ -&gt; ()
</code></pre>

<p>```</p>

<p>If you build up a large chain of these things, then writing all this would get cumbersome.</p>

<h3>Maybe monad</h3>

<p>If you know your monads, you may have already noticed that the &ldquo;Simon Says&rdquo; monad bears a slightly resemblance to the &ldquo;Maybe&rdquo; monad. Ok, it IS actually maybe monad. Infact you can find more information about the maybe monad <a href="http://en.wikibooks.org/wiki/F_Sharp_Programming/Computation_Expressions">here</a>.</p>
]]></content>
  </entry>
  
</feed>
