<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: fsharp | Simon's Blog]]></title>
  <link href="http://simonhdickson.github.io/blog/categories/fsharp/atom.xml" rel="self"/>
  <link href="http://simonhdickson.github.io/"/>
  <updated>2013-12-14T10:02:41+00:00</updated>
  <id>http://simonhdickson.github.io/</id>
  <author>
    <name><![CDATA[Simon Dickson]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Nancy + F# = Fancy]]></title>
    <link href="http://simonhdickson.github.io/blog/2013/12/14/nancy-plus-fsharp/"/>
    <updated>2013-12-14T10:00:00+00:00</updated>
    <id>http://simonhdickson.github.io/blog/2013/12/14/nancy-plus-fsharp</id>
    <content type="html"><![CDATA[<p>Last week I made the <a href="blog/2013/12/03/owin-the-myth">owin monad</a>, and when I showed it to <a href="https://twitter.com/nbevans">@nbevans</a> he suggested making it work with nancy.</p>

<p>So I did.</p>

<p>Let me introduce Fancy:</p>

<p>``` fsharp
let pipeline =</p>

<pre><code>nancy {
    get "/" (fun () -&gt; sprintf "Hello World!")
    get "/%s" (fun name -&gt; sprintf "Hello %s!" name) 
    get "/square/%i" (fun number -&gt; sprintf "%i" &lt;| number * number) 
}
</code></pre>

<p>```</p>

<p>I won&rsquo;t dig too heavily into the code at this moment, it is quite ugly and hacky in places. It is also obviously not production ready. However, the nice thing about this is that it is fully typed, i.e:</p>

<p>``` fsharp
let pipeline =</p>

<pre><code>nancy {
    get "/%s" (fun name -&gt; sprintf "%s" name)       // Works
    get "/%s" (fun (name:int) -&gt; sprintf "%s" name) // Compiler error!
    get "/%i" (fun name -&gt; sprintf "%s" name)       // Compiler error!
    get "/%s" (fun name -&gt; sprintf "%i" name)       // Compiler error!
}
</code></pre>

<p>```</p>

<p>Now if you know your nancy, you&rsquo;ll know that nancy doesn&rsquo;t expect the format &ldquo;/%s&rdquo; or &ldquo;/%i&rdquo;; it expects the format &ldquo;/{name}&rdquo; or &ldquo;/{number:int}&rdquo;. And you probably also know that all normally StringFormat functions in F# take type parameters, rather than a function of those types.</p>

<p>Well what happens is we&rsquo;re only using StringFormat for static type checking, we&rsquo;re not actually using StringFormat here quite as it was intended.</p>

<p>```fsharp
member this.Get(m, url:StringFormat&lt;&lsquo;a->'b,'c>, processor:'a->'b) =</p>

<pre><code>// ommitted
</code></pre>

<p>```</p>

<p>These type constraints do that. There is actually a slight error, with the above code, but I&rsquo;m reasonably certain it can be converted into a feature. You see you are required to have the correct parameters in the correct order, but extra paramters are allowed.</p>

<p>```fsharp
let pipeline =</p>

<pre><code>nancy {
    get "/%s" (fun name (other:int) -&gt; sprintf "%s" name)       // Compiles
}
</code></pre>

<p>```</p>

<p>Currently this will cause the code to fail, however it is quite possible we can use that to implement a convention based system for passing extra things like headers, parameters, etc.</p>

<p>Anyway here is a <a href="https://github.com/simonhdickson/Fancy">link to the repo</a>, feel free to grab the code and have a play!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Owin: The Myth, the Monad]]></title>
    <link href="http://simonhdickson.github.io/blog/2013/12/03/owin-the-myth/"/>
    <updated>2013-12-03T20:37:00+00:00</updated>
    <id>http://simonhdickson.github.io/blog/2013/12/03/owin-the-myth</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve played with owin in F# <a href="https://github.com/simonhdickson/Bar">before</a> and recently have been playing with computational builders. So I thought the other day, how about combining them both so you can write something long the lines of this:</p>

<p>``` fsharp Owin Monad
let pipeline =</p>

<pre><code>owin {
    get "/" &lt;@ fun () -&gt; "Hello World" @&gt;
}
</code></pre>

<p>```</p>

<p>Gotta love that syntactic sugar, so how do we do this? Well really, the owin monad is actually really simple to implement. You have a state, in this case the state is the is the IAppBuilder. So for posterity let&rsquo;s just steal the important bits of the state monad from FSharpx and use that. So let&rsquo;s skip to the good bit:</p>

<p>``` fsharp OwinBuilder
 type OwinBuilder() =</p>

<pre><code>// omitted
[&lt;CustomOperation("get", MaintainsVariableSpaceUsingBind=true)&gt;]
member this.Get(m, url, processor) =
    this.Bind(m, fun a -&gt;
        this.Bind(getState, fun (app:IAppBuilder) -&gt;
            putState &lt;| app.UseRequestProcessor("GET", url, processor)))
</code></pre>

<p>```</p>

<p>In a computation expression there is a <a href="http://msdn.microsoft.com/en-us/library/dd233182.aspx">standard workflow</a> for operations that you can use (this includes the Bind operation). In our case we don&rsquo;t actually want this, we want to define our own operators (for get, post, etc). The CustomOperation attribute allows you to define a these, and also describe how your custom operator works.</p>

<p>In this case we want to define our operator so that each line defines a new endpoint of our web api, and pass all the state around in the background. To do this the &ldquo;MaintainsVariableSpaceUsingBind&rdquo;, works to bind all the statements together. In the above code any previous operators will be passed in the m paramter, and then the we&rsquo;re basically appending our new owin endpoint to end of that, which will then be passed into the next operator, etc.</p>

<p>Anyway, here is a <a href="https://github.com/simonhdickson/OwinBuilder">link to the repository</a>, if you&rsquo;re interested in looking into it further.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tabs vs Spaces]]></title>
    <link href="http://simonhdickson.github.io/blog/2013/11/24/tabs-vs-spaces/"/>
    <updated>2013-11-24T22:05:00+00:00</updated>
    <id>http://simonhdickson.github.io/blog/2013/11/24/tabs-vs-spaces</id>
    <content type="html"><![CDATA[<h3>Spaces, the final frontier</h3>

<p>Tabs vs Spaces: the greatest of all the holy wars. Well it turns out that in F# there is no need for that debate: because in F# tabs are treated as an error by the compiler.</p>

<p>``` fsharp Tabs treated as error
let spaceFun x =</p>

<pre><code>x // ok
</code></pre>

<p>let tabFun x =</p>

<pre><code>x // error!
</code></pre>

<p>```</p>

<p>Now if only there was an option for the F# compiler to treat nulls as errors too&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Simon Says Monad]]></title>
    <link href="http://simonhdickson.github.io/blog/2013/11/22/the-simon-says-monad/"/>
    <updated>2013-11-22T15:56:00+00:00</updated>
    <id>http://simonhdickson.github.io/blog/2013/11/22/the-simon-says-monad</id>
    <content type="html"><![CDATA[<h3>What is a Monad?</h3>

<p>Everyone tries to explain monads in a simple way and makes it sound way more complicated than it really is. Something is monadic if there are rule or set of rules that can define how a set of functions is combined into another function. That not strictly mathmatically true, but anything that fits that description could at least be described as monadic.</p>

<p>You might be reading that and thinking &ldquo;surely everything is monadic?&rdquo;, well yes, almost everything is kind of monadic (or can be described in that way).</p>

<h3>The Simon Says Monad</h3>

<p>May I present the single most useful monad in the world!</p>

<p>``` fsharp Simon Says
let doIt this that =</p>

<pre><code>simonSays{
    let! i = this
    let! j = that
    printfn "%i" &lt;| i + j
}
</code></pre>

<p>```</p>

<p>So, the way I see it, when you declare simonSays { &hellip; }; you&rsquo;re basically saying &ldquo;we don&rsquo;t play by normal rules: now we play by simonSays rules.&rdquo; What this means is, if you don&rsquo;t say &ldquo;Simon Says&rdquo;, then you don&rsquo;t do anything. So for example, if we invoke it like this:</p>

<p><code>fsharp Simon Says 1 + 1
doIt (SimonSays 1) (SimonSays 1)
</code></p>

<p>Then the result is SimonSays 2. However if we do:</p>

<p><code>fsharp Simon Says 1 + SimonDidntSay
doIt (SimonSays 1) SimonDidntSay
</code></p>

<p>The the result is SimonDidntSay. To go back to the definition of monads earlier, &ldquo;Something is monadic if there are rule or set of rules that can define how a set of functions is combined into another function&rdquo;. In the Simon Says monad, there is a single very simple rule: you must say &ldquo;Simon Says&rdquo;, otherwise we don&rsquo;t do anything. If we re-write this code slightly to remove all the F# sugar, it become far more obvious what is happening here.</p>

<p>``` fsharp Simon Says using matches
let doIt this that =</p>

<pre><code>match this with
| SimonSays i -&gt;
    match that with
    | SimonSays j -&gt; printfn "%i" &lt;| i + j
    | _ -&gt; ()
| _ -&gt; ()
</code></pre>

<p>```</p>

<p>If you build up a large chain of these things, then writing all this would get cumbersome.</p>

<h3>Maybe monad</h3>

<p>If you know your monads, you may have already noticed that the &ldquo;Simon Says&rdquo; monad bears a slightly resemblance to the &ldquo;Maybe&rdquo; monad. Ok, it IS actually maybe monad. Infact you can find more information about the maybe monad <a href="http://en.wikibooks.org/wiki/F_Sharp_Programming/Computation_Expressions">here</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FsCheck]]></title>
    <link href="http://simonhdickson.github.io/blog/2013/11/16/fscheck/"/>
    <updated>2013-11-16T15:33:00+00:00</updated>
    <id>http://simonhdickson.github.io/blog/2013/11/16/fscheck</id>
    <content type="html"><![CDATA[<h2>Property based testing</h2>

<p>So you might be first wondering what property based testing means. Simply put you describe properties of your functions, and then you bombard your code with data trying to prove or disprove these properties.</p>

<p>Here&rsquo;s an example, let&rsquo;s say we have a function like this:</p>

<p>``` fsharp Remove Negatives Function
let removeNegatives list =</p>

<pre><code>    let rec removeNegatives' list newList =
        match list with
        | [] -&gt; newList
        | head :: tail when head &lt; 0 -&gt; removeNegatives' tail newList 
        | head :: tail -&gt; removeNegatives' tail (head :: newList)
    removeNegatives' list []
</code></pre>

<p>```
And we want to say this function has the following three properties:</p>

<ol>
<li>If you pass in a list, it returns the list without any negative numbers in it.</li>
<li>If you pass in a list without any negative numbers in it, you get exactly the same list back (this is implied from the first property, but let&rsquo;s make it explict anyway).</li>
<li>The function will not re-order the elements.</li>
</ol>


<p>So, how do we go about testing these properties?</p>

<h2>FsCheck to the rescue</h2>

<p>FsCheck is an F# port of the Haskell framework QuickCheck. What it&rsquo;ll let us do is fire a whole bunch of data at our function with the aim of helping us ensure that these properties hold.</p>

<p>Now before we get onto FsCheck itself, let&rsquo;s look at how we might test this traditionally. Normally using something like xUnit, you&rsquo;d have to write specific examples such as this:</p>

<p><code>` fsharp Normal test
[&lt;Fact&gt;]
let</code>for a non-negative list, returns the same list`` () =</p>

<pre><code>let list = [1;2;3]
let result = list = removeNegatives list
Assert.True result
</code></pre>

<p>```</p>

<p>This does work, but it means you have to manually come up with a few examples of this, a few examples of the other ones. In this particular case the function is simple enough that this would find any bugs but in more complex functions there might be certain numbers that would break it.</p>

<p>So using FsCheck we would instead might define this test like this:</p>

<p><code>` fsharp FsCheck test
[&lt;Property&gt;]
let</code>for a non-negative list, returns the same list`` (list:NonNegativeInt list) =</p>

<pre><code>let list = List.map (fun (i:NonNegativeInt) -&gt; i.Get) list
list = removeNegatives list   
</code></pre>

<p>```</p>

<p>The Property attribute works just like the Fact in xUnit or the Test in Nunit. There is one major difference however: the function no longer takes unit, it can take any parameter that FsCheck knows how to create (and yes, you can define them yourself). NonNegativeInt is a built in alias for int which is as the name suggests is a int which is not negative.</p>

<p>You may also have noticed that there are no asserts in this test either. That is because as long as your function returns something FsCheck understands (i.e. bool, exceptions, etc), FsCheck will work out whether the test failed or not that way. So in this case, so long as the final line resolves to true, then the test will be considered to have passed.</p>

<p>There is actually one final thing to note here aswell, this test isn&rsquo;t excuted once. By default FsCheck will try to find 100 parameters that work and run the test that many times. You can change this number by setting the MaxSize like this:</p>

<p><code>` fsharp FsCheck MaxSize
[&lt;Property(MaxSize=1000)&gt;]
let</code>my test`` () =</p>

<pre><code>...
</code></pre>

<p>```</p>

<p>Anyway, back the tests. If you try and run this test, you&rsquo;ll see that it fails. Oh noes! What could possibly be wrong?!?! Oh yes, have you noticed that the list is actually reversed during the process, which breaks one of our properties. So lets fix that.</p>

<p>``` fsharp Remove Negatives Function V2
let removeNegatives list =</p>

<pre><code>    let rec removeNegatives' list newList =
        match list with
        | [] -&gt; List.rev newList
        | head :: tail when head &lt; 0 -&gt; removeNegatives' tail newList 
        | head :: tail -&gt; removeNegatives' tail (head :: newList)
    removeNegatives' list []
</code></pre>

<p>```</p>

<p>Ok, so now we have a test covering that second property: if you pass in a non-negative list, you get the same list back again.</p>

<p>So now how about the first property, testing for the removal of elements less than zero. Well first we could write a test that checks that if you pass in a list of negative numbers, it should always return an empty list:</p>

<p>``` fsharp</p>

<pre><code>[&lt;Property&gt;]
let ``for a negative list, returns an empty list`` (list:PositiveInt list) =
    let list = List.map (fun (i:PositiveInt) -&gt; -1 * i.Get) list
    [] = removeNegatives list   
</code></pre>

<p>```</p>

<p>Ok great and that passes, maybe we should write a test that tests if it actually filters things out. Well that looks something like this:</p>

<p>``` fsharp
[<Property>]</p>

<pre><code>let ``for a mixed list, returns a positive list`` (list:int list) =
    let outputList = List.filter (fun i -&gt; i &gt;= 0) list
    outputList = removeNegatives list  
</code></pre>

<p>```</p>

<p>In this case, this test rather points out the uselessness of this function. Maybe that makes it quite a bad example, but I put it here for completeness anyway (after all it does implement the same function in a single line).</p>

<h2>Side note</h2>

<p>I probably should point out that I have had some problem with using FsCheck, if you have you&rsquo;re using NCrunch you might notice the tests don&rsquo;t get picked up. However, I have found that if you include the following code in your module it works:</p>

<p><code>` fsharp
[&lt;Fact&gt;]
let</code>ignore this test`` () =</p>

<pre><code>()
</code></pre>

<p>```</p>

<p>This (for some reason) causes NCrunch to see all the other tests too.</p>
]]></content>
  </entry>
  
</feed>
